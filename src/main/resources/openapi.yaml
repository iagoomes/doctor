openapi: 3.0.3
info:
  title: "Doctor API"
  description: "API for managing doctors"
  version: "1.0.0"
tags:
  - name: "Doctor"
    description: "Operations related to doctors"
paths:
  /doctors:
    post:
      tags:
        - Doctor
      summary: "Create a new doctor"
      operationId: "createDoctor"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/DoctorRequestDTO"
      responses:
        "200":
          description: "Doctor created successfully"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DoctorDetailDTO"
        "400":
          description: "Bad Request"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "500":
          description: "Internal Server Error"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
    get:
      tags:
        - Doctor
      summary: "List all doctors"
      operationId: "listDoctors"
      responses:
        "200":
          description: "List of doctors"
          content:
            application/json:
              schema:
                type: "array"
                items:
                  $ref: "#/components/schemas/DoctorResponseDTO"
        "500":
          description: "Internal Server Error"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
  /doctors/{id}:
    get:
      tags:
        - Doctor
      summary: "Get doctor by ID"
      operationId: "getDoctorById"
      parameters:
        - $ref: "#/components/parameters/DoctorId"
      responses:
        "200":
          description: "Doctor details"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DoctorDetailDTO"
        "404":
          description: "Doctor not found"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "500":
          description: "Internal Server Error"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
    put:
      tags:
        - Doctor
      summary: "Update doctor by ID"
      operationId: "updateDoctor"
      parameters:
        - $ref: "#/components/parameters/DoctorId"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/DoctorRequestDTO"
      responses:
        "200":
          description: "Doctor updated successfully"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DoctorDetailDTO"
        "400":
          description: "Bad Request"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "404":
          description: "Doctor not found"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "500":
          description: "Internal Server Error"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
    delete:
      tags:
        - Doctor
      summary: "Delete doctor by ID"
      operationId: "deleteDoctor"
      parameters:
        - $ref: "#/components/parameters/DoctorId"
      responses:
        "200":
          description: "Doctor deleted successfully"
        "404":
          description: "Doctor not found"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "500":
          description: "Internal Server Error"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

components:
  parameters:
    DoctorId:
      name: "id"
      in: "path"
      required: true
      schema:
        type: "string"
  schemas:
    AddressDTO:
      type: "object"
      properties:
        street:
          type: "string"
          description: "Street name and number"
        city:
          type: "string"
          description: "City name"
        state:
          type: "string"
          description: "State or province"
        zipCode:
          type: "string"
          description: "Postal code"
      required:
        - street
        - city
        - state
        - zipCode
    AddressRequestDTO:
      allOf:
        - $ref: "#/components/schemas/AddressDTO"
    SpecialtyDTO:
      type: "string"
      enum:
        - "ORTHOPEDICS"
        - "CARDIOLOGY"
        - "GYNECOLOGY"
        - "DERMATOLOGY"
    DoctorRequestDTO:
      type: "object"
      properties:
        name:
          type: "string"
        email:
          type: "string"
          format: "email"
        phone:
          type: "string"
          pattern: "\\(\\d{2}\\) \\d{5}-\\d{4}"
        crm:
          type: "string"
          pattern: "\\d{4,6}"
        specialty:
          $ref: "#/components/schemas/SpecialtyDTO"
        address:
          $ref: "#/components/schemas/AddressRequestDTO"
      required:
        - name
        - email
        - phone
        - crm
        - specialty
        - address
    DoctorResponseDTO:
      type: "object"
      properties:
        id:
          type: "integer"
          format: "int64"
        name:
          type: "string"
        email:
          type: "string"
          format: "email"
        crm:
          type: "string"
        specialty:
          $ref: "#/components/schemas/SpecialtyDTO"
    DoctorDetailDTO:
      type: "object"
      properties:
        id:
          type: "integer"
          format: "int64"
        name:
          type: "string"
        email:
          type: "string"
          format: "email"
        phone:
          type: "string"
          pattern: "\\(\\d{2}\\) \\d{5}-\\d{4}"
        crm:
          type: "string"
        active:
          type: "boolean"
        specialty:
          $ref: "#/components/schemas/SpecialtyDTO"
        address:
          $ref: "#/components/schemas/AddressDTO"
    ErrorResponse:
      type: "object"
      properties:
        traceId:
          type: "string"
        timestamp:
          type: "string"
        message:
          type: "array"
          items:
            type: "string"